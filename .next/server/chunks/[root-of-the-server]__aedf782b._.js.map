{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/devisha/Projects/chat-and-predict/src/algorithms/betAdvice.ts"],"sourcesContent":["// Bet advice logic for prediction market bot\n\nexport interface BetAdviceInput {\n  marketProbability: number; // e.g. 0.55 for 55%\n  botProbability: number;    // e.g. 0.60 for 60%\n  marketOdds: number;        // e.g. 1.8 (decimal odds)\n  bankroll?: number;         // optional, for stake advice\n  priceHistory?: number[];   // optional, for trend analysis\n}\n\nexport interface BetAdviceResult {\n  oddsAdvice: string;\n  trendAdvice: string;\n  sentimentAdvice: string;\n  priceHistory?: number[];\n}\n\nexport function getBetAdvice(input: BetAdviceInput): BetAdviceResult {\n  // (A) Odds Analysis\n  const edge = input.botProbability - input.marketProbability;\n  let oddsAdvice = '';\n  if (edge > 0) {\n    oddsAdvice = \"This market is undervalued. You’re getting alpha here. Go for it 🤑.\";\n  } else {\n    oddsAdvice = \"Careful! The market is overpricing this. Risk is higher than reward ⚠️.\";\n  }\n\n  // (B) Stake Size Advice (Kelly Criterion)\n  let stakeAdvice = '';\n  if (input.bankroll && input.marketOdds > 1) {\n    // Kelly formula: f* = (bp - q) / (odds - 1), where b = odds - 1, p = botProbability, q = 1 - p\n    const b = input.marketOdds - 1;\n    const p = input.botProbability;\n    const q = 1 - p;\n    const kelly = (b * p - q) / b;\n    const percent = Math.max(0, Math.round(kelly * 100));\n    stakeAdvice = `Optimal stake: ${percent}% of your bankroll.`;\n  } else {\n    stakeAdvice = \"No bankroll info provided. Can't compute optimal stake.\";\n  }\n\n  // (C) Market Trends (improved)\n  let trendAdvice = '';\n  if (input.priceHistory && input.priceHistory.length > 1) {\n    const oldPrice = input.priceHistory[0];\n    const newPrice = input.priceHistory[input.priceHistory.length - 1];\n    const change = ((newPrice - oldPrice) / oldPrice) * 100;\n    trendAdvice = `Price changed ${change.toFixed(2)}% over the period.`;\n    if (Math.abs(change) > 20) {\n      trendAdvice += \" Could be risky 🚨.\";\n    } else if (change > 0) {\n      trendAdvice += \" Uptrend 📈.\";\n    } else if (change < 0) {\n      trendAdvice += \" Downtrend 📉.\";\n    } else {\n      trendAdvice += \" Flat trend.\";\n    }\n  } else {\n    trendAdvice = \"No price history available for trend analysis.\";\n  }\n\n  // (D) Sentiment Check (mocked)\n  const sentimentAdvice = Math.random() > 0.5\n    ? \"Sentiment is highly bullish on this outcome – 80% of recent posts agree.\"\n    : \"Sentiment is mixed. Proceed cautiously.\";\n\n  return {\n    oddsAdvice,\n    trendAdvice,\n    sentimentAdvice,\n    priceHistory: input.priceHistory,\n  };\n} "],"names":[],"mappings":"AAAA,6CAA6C;;;;AAiBtC,SAAS,aAAa,KAAqB;IAChD,oBAAoB;IACpB,MAAM,OAAO,MAAM,cAAc,GAAG,MAAM,iBAAiB;IAC3D,IAAI,aAAa;IACjB,IAAI,OAAO,GAAG;QACZ,aAAa;IACf,OAAO;QACL,aAAa;IACf;IAEA,0CAA0C;IAC1C,IAAI,cAAc;IAClB,IAAI,MAAM,QAAQ,IAAI,MAAM,UAAU,GAAG,GAAG;QAC1C,+FAA+F;QAC/F,MAAM,IAAI,MAAM,UAAU,GAAG;QAC7B,MAAM,IAAI,MAAM,cAAc;QAC9B,MAAM,IAAI,IAAI;QACd,MAAM,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI;QAC5B,MAAM,UAAU,KAAK,GAAG,CAAC,GAAG,KAAK,KAAK,CAAC,QAAQ;QAC/C,cAAc,CAAC,eAAe,EAAE,QAAQ,mBAAmB,CAAC;IAC9D,OAAO;QACL,cAAc;IAChB;IAEA,+BAA+B;IAC/B,IAAI,cAAc;IAClB,IAAI,MAAM,YAAY,IAAI,MAAM,YAAY,CAAC,MAAM,GAAG,GAAG;QACvD,MAAM,WAAW,MAAM,YAAY,CAAC,EAAE;QACtC,MAAM,WAAW,MAAM,YAAY,CAAC,MAAM,YAAY,CAAC,MAAM,GAAG,EAAE;QAClE,MAAM,SAAS,AAAC,CAAC,WAAW,QAAQ,IAAI,WAAY;QACpD,cAAc,CAAC,cAAc,EAAE,OAAO,OAAO,CAAC,GAAG,kBAAkB,CAAC;QACpE,IAAI,KAAK,GAAG,CAAC,UAAU,IAAI;YACzB,eAAe;QACjB,OAAO,IAAI,SAAS,GAAG;YACrB,eAAe;QACjB,OAAO,IAAI,SAAS,GAAG;YACrB,eAAe;QACjB,OAAO;YACL,eAAe;QACjB;IACF,OAAO;QACL,cAAc;IAChB;IAEA,+BAA+B;IAC/B,MAAM,kBAAkB,KAAK,MAAM,KAAK,MACpC,6EACA;IAEJ,OAAO;QACL;QACA;QACA;QACA,cAAc,MAAM,YAAY;IAClC;AACF","debugId":null}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///Users/devisha/Projects/chat-and-predict/src/app/api/analyze/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getBetAdvice } from '@/algorithms/betAdvice';\n\nconst ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY!;\nconst ALCHEMY_PRICE_HISTORY_ENDPOINT = `https://api.g.alchemy.com/prices/v1/${ALCHEMY_API_KEY}/tokens/historical`;\nconst COINGECKO_API_KEY = process.env.COINGECKO_API_KEY!;\nconst TOKEN_CONTRACTS: Record<string, string | null> = {\n  ETH: null, // native\n  WBTC: '0x2260FAC5E5542a773AaA73edC008A79646d1F9912',\n  WDOGE: '0xbA2aE424d960c26247Dd6c32edC70B295c744C43',\n  USDT: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n  USDC: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  SHIBA: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  PEPE: '0x6982508145454Ce325dDbE47a25d4ec3d2311933',\n  TON: '0x2e9d63788249371f1dfc918a52f8d799f4a38c94', // ERC-20 version\n  // SOL: Not ERC-20, handle separately if needed\n  // BONK: Not ERC-20, handle separately if needed\n};\n\nfunction calculateMovingAverage(prices: number[], window: number): number | null {\n  if (prices.length < window) return null;\n  const sum = prices.slice(-window).reduce((a, b) => a + b, 0);\n  return sum / window;\n}\n\nfunction getTodayISOString() {\n  return new Date().toISOString().split('T')[0] + 'T23:59:59Z';\n}\nfunction getPastISOString(days: number) {\n  const d = new Date();\n  d.setDate(d.getDate() - days);\n  return d.toISOString().split('T')[0] + 'T00:00:00Z';\n}\n\nasync function fetchAlchemyHistory(token: string, contract: string | null, days: number) {\n  if (!contract && token !== 'ETH') return [];\n  const startTime = getPastISOString(days);\n  const endTime = getTodayISOString();\n  const body = contract\n    ? { network: 'ethereum', address: contract, startTime, endTime }\n    : { symbol: token, startTime, endTime };\n  const res = await fetch(ALCHEMY_PRICE_HISTORY_ENDPOINT, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body),\n  });\n  const data = await res.json();\n  if (data?.data?.prices) {\n    return data.data.prices.map((p: any) => parseFloat(p.value)).filter((v: any) => !isNaN(v));\n  }\n  return [];\n}\n\nasync function fetchCoinGeckoHistory(contract: string, days: number) {\n  const url = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${contract}/market_chart?vs_currency=usd&days=${days}`;\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    if (data?.prices) {\n      return data.prices.map((p: any) => p[1]).filter((v: any) => !isNaN(v));\n    } else {\n      console.log(`[CoinGecko] No price history found for contract: ${contract}`);\n    }\n  } catch (err) {\n    console.error(`[CoinGecko] Error fetching price history for contract: ${contract}`, err);\n  }\n  return [];\n}\n\nasync function fetchSolHistory(days: number) {\n  const url = `https://api.coingecko.com/api/v3/coins/solana/market_chart?vs_currency=usd&days=${days}`;\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    if (data?.prices) {\n      return data.prices.map((p: any) => p[1]).filter((v: any) => !isNaN(v));\n    } else {\n      console.log(`[CoinGecko] No price history found for SOL`);\n    }\n  } catch (err) {\n    console.error(`[CoinGecko] Error fetching price history for SOL`, err);\n  }\n  return [];\n}\n\nconst NODIT_API_URL = process.env.NODIT_API_URL || \"http://localhost:3000/api/nodit\";\n\nasync function fetchCurrentPriceNodit(token: string) {\n  try {\n    const res = await fetch(NODIT_API_URL, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"get_price\", // Replace with actual Nodit method for price\n        params: [token],\n        id: 1\n      })\n    });\n    const data = await res.json();\n    if (data?.result?.price) {\n      return data.result.price;\n    }\n  } catch (err) {\n    console.error(`[Nodit] Error fetching current price for ${token}`, err);\n  }\n  return null;\n}\n\n// Fetch current price using CoinGecko\nasync function fetchCurrentPriceCoinGecko(token: string, contract?: string) {\n  try {\n    let url = \"\";\n    if (token === \"ETH\") {\n      url = `https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd`;\n    } else if (token === \"SOL\") {\n      url = `https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd`;\n    } else if (contract) {\n      url = `https://api.coingecko.com/api/v3/simple/token_price/ethereum?contract_addresses=${contract}&vs_currencies=usd`;\n    } else {\n      return null;\n    }\n    const res = await fetch(url);\n    const data = await res.json();\n    if (token === \"ETH\" && data?.ethereum?.usd) return data.ethereum.usd;\n    if (token === \"SOL\" && data?.solana?.usd) return data.solana.usd;\n    if (contract) {\n      const key = Object.keys(data)[0];\n      if (key && data[key]?.usd) return data[key].usd;\n    }\n  } catch (err) {\n    console.error(`[CoinGecko] Error fetching current price for ${token}`, err);\n  }\n  return null;\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { token, priceToken, marketProbability, marketOdds, bankroll } = await req.json();\n    if (\n      typeof marketOdds !== 'number' ||\n      typeof token !== 'string'\n    ) {\n      return NextResponse.json({ error: 'Invalid input' }, { status: 400 });\n    }\n\n    let price = null;\n    let priceHistory: number[] = [];\n    let botProbability = 0.6; // fallback\n    let ma7 = null, ma15 = null, ma30 = null;\n    const lookupToken = priceToken || token;\n    let symbol = token;\n    // Fetch current price using Nodit, fallback to CoinGecko\n    price = await fetchCurrentPriceNodit(lookupToken);\n    let contract = TOKEN_CONTRACTS[lookupToken];\n    if (price === null) {\n      price = await fetchCurrentPriceCoinGecko(lookupToken, contract === null ? undefined : contract);\n    }\n    if (lookupToken === 'ETH') {\n      priceHistory = [3400, 3450, 3500];\n      botProbability = 0.6;\n      ma7 = ma15 = ma30 = 3500;\n    } else if (lookupToken === 'SOL') {\n      // Fetch SOL price history using CoinGecko's symbol endpoint\n      const history7 = await fetchSolHistory(7);\n      priceHistory = history7;\n      ma7 = calculateMovingAverage(history7, 7);\n      botProbability = ma7 && price ? Math.min(1, Math.max(0, ma7 / price)) : 0.6;\n    } else {\n      const contract = TOKEN_CONTRACTS[lookupToken];\n      if (!contract) {\n        return NextResponse.json({ error: 'Unsupported token' }, { status: 400 });\n      }\n      // Try Alchemy first\n      let history7 = await fetchAlchemyHistory(token, contract, 7);\n      if (!history7.length) {\n        // Fallback to CoinGecko\n        history7 = await fetchCoinGeckoHistory(contract, 7);\n      }\n      priceHistory = history7;\n      ma7 = calculateMovingAverage(history7, 7);\n      // For demo, use 7-day MA as botProbability\n      botProbability = ma7 && price ? Math.min(1, Math.max(0, ma7 / price)) : 0.6;\n    }\n\n    const result = getBetAdvice({\n      marketProbability: marketProbability ?? 0.55,\n      botProbability,\n      marketOdds: marketOdds ?? 1.8,\n      bankroll,\n      priceHistory,\n    });\n    return NextResponse.json({ ...result, price, token, ma7 });\n  } catch (error) {\n    return NextResponse.json({ error: (error as Error).message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}